/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Crowdfund {
  export type CampaignStruct = {
    creator: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    goal: PromiseOrValue<BigNumberish>;
    pledged: PromiseOrValue<BigNumberish>;
    startAt: PromiseOrValue<BigNumberish>;
    endAt: PromiseOrValue<BigNumberish>;
    claimed: PromiseOrValue<boolean>;
    minimumContribution: PromiseOrValue<BigNumberish>;
  };

  export type CampaignStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    boolean,
    BigNumber
  ] & {
    creator: string;
    description: string;
    goal: BigNumber;
    pledged: BigNumber;
    startAt: number;
    endAt: number;
    claimed: boolean;
    minimumContribution: BigNumber;
  };
}

export interface CrowdfundInterface extends utils.Interface {
  functions: {
    "cancel(uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getCampaignAtIndex(uint256)": FunctionFragment;
    "getCampignsCount()": FunctionFragment;
    "getMyPledgedAmount(uint256)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "launchCampign(string,uint256,uint256,uint32,uint32)": FunctionFragment;
    "pledge(uint256)": FunctionFragment;
    "refund(uint256)": FunctionFragment;
    "unpledge(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancel"
      | "claim"
      | "getBalance"
      | "getCampaignAtIndex"
      | "getCampignsCount"
      | "getMyPledgedAmount"
      | "getOwner"
      | "launchCampign"
      | "pledge"
      | "refund"
      | "unpledge"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampignsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyPledgedAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "launchCampign",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pledge",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpledge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampignsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyPledgedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "launchCampign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpledge", data: BytesLike): Result;

  events: {
    "Cancel(uint256)": EventFragment;
    "Claim(uint256)": EventFragment;
    "LaunchCampign(uint256,address,string,uint256,uint256,uint32,uint32)": EventFragment;
    "Pledge(uint256,address,uint256)": EventFragment;
    "Refund(uint256,address,uint256)": EventFragment;
    "Unpledge(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LaunchCampign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pledge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpledge"): EventFragment;
}

export interface CancelEventObject {
  id: BigNumber;
}
export type CancelEvent = TypedEvent<[BigNumber], CancelEventObject>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface ClaimEventObject {
  id: BigNumber;
}
export type ClaimEvent = TypedEvent<[BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface LaunchCampignEventObject {
  id: BigNumber;
  creator: string;
  description: string;
  goal: BigNumber;
  minimumContribution: BigNumber;
  startAt: number;
  endAt: number;
}
export type LaunchCampignEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, number, number],
  LaunchCampignEventObject
>;

export type LaunchCampignEventFilter = TypedEventFilter<LaunchCampignEvent>;

export interface PledgeEventObject {
  id: BigNumber;
  caller: string;
  amount: BigNumber;
}
export type PledgeEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PledgeEventObject
>;

export type PledgeEventFilter = TypedEventFilter<PledgeEvent>;

export interface RefundEventObject {
  id: BigNumber;
  caller: string;
  amount: BigNumber;
}
export type RefundEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RefundEventObject
>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface UnpledgeEventObject {
  id: BigNumber;
  caller: string;
  amount: BigNumber;
}
export type UnpledgeEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  UnpledgeEventObject
>;

export type UnpledgeEventFilter = TypedEventFilter<UnpledgeEvent>;

export interface Crowdfund extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdfundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancel(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCampaignAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Crowdfund.CampaignStructOutput]>;

    getCampignsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMyPledgedAmount(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    launchCampign(
      _description: PromiseOrValue<string>,
      _goal: PromiseOrValue<BigNumberish>,
      _minimumContribution: PromiseOrValue<BigNumberish>,
      _startAt: PromiseOrValue<BigNumberish>,
      _endAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pledge(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refund(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpledge(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancel(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCampaignAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Crowdfund.CampaignStructOutput>;

  getCampignsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getMyPledgedAmount(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  launchCampign(
    _description: PromiseOrValue<string>,
    _goal: PromiseOrValue<BigNumberish>,
    _minimumContribution: PromiseOrValue<BigNumberish>,
    _startAt: PromiseOrValue<BigNumberish>,
    _endAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pledge(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refund(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpledge(
    _id: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancel(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Crowdfund.CampaignStructOutput>;

    getCampignsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMyPledgedAmount(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    launchCampign(
      _description: PromiseOrValue<string>,
      _goal: PromiseOrValue<BigNumberish>,
      _minimumContribution: PromiseOrValue<BigNumberish>,
      _startAt: PromiseOrValue<BigNumberish>,
      _endAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pledge(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpledge(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Cancel(uint256)"(id?: null): CancelEventFilter;
    Cancel(id?: null): CancelEventFilter;

    "Claim(uint256)"(id?: null): ClaimEventFilter;
    Claim(id?: null): ClaimEventFilter;

    "LaunchCampign(uint256,address,string,uint256,uint256,uint32,uint32)"(
      id?: null,
      creator?: PromiseOrValue<string> | null,
      description?: null,
      goal?: null,
      minimumContribution?: null,
      startAt?: null,
      endAt?: null
    ): LaunchCampignEventFilter;
    LaunchCampign(
      id?: null,
      creator?: PromiseOrValue<string> | null,
      description?: null,
      goal?: null,
      minimumContribution?: null,
      startAt?: null,
      endAt?: null
    ): LaunchCampignEventFilter;

    "Pledge(uint256,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): PledgeEventFilter;
    Pledge(
      id?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): PledgeEventFilter;

    "Refund(uint256,address,uint256)"(
      id?: null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): RefundEventFilter;
    Refund(
      id?: null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): RefundEventFilter;

    "Unpledge(uint256,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): UnpledgeEventFilter;
    Unpledge(
      id?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): UnpledgeEventFilter;
  };

  estimateGas: {
    cancel(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampignsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMyPledgedAmount(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    launchCampign(
      _description: PromiseOrValue<string>,
      _goal: PromiseOrValue<BigNumberish>,
      _minimumContribution: PromiseOrValue<BigNumberish>,
      _startAt: PromiseOrValue<BigNumberish>,
      _endAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pledge(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refund(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpledge(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCampaignAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampignsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyPledgedAmount(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launchCampign(
      _description: PromiseOrValue<string>,
      _goal: PromiseOrValue<BigNumberish>,
      _minimumContribution: PromiseOrValue<BigNumberish>,
      _startAt: PromiseOrValue<BigNumberish>,
      _endAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pledge(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpledge(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
